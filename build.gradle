plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.1.1'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

// ↓↓↓ ДОБАВЬТЕ ЭТОТ БЛОК ↓↓↓
ext {
    set('springCloudVersion', "2023.0.0")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

version = '1.0.0-beta.1'

repositories {
    mavenCentral()
}

// Настройка JavaFX для работы в IDE и JAR
javafx {
    version = "21.0.8"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing']
}

dependencies {
    //===JavaFX зависимости===========
    implementation 'org.openjfx:javafx-controls:21.0.8'
    implementation 'org.openjfx:javafx-fxml:21.0.8'
    //=======================

    //===Spring зависимости=======================
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    //implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    //implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

    compileOnly 'org.springframework.boot:spring-boot-starter-security'
    //=======================

    //===Другие зависимости============
    implementation 'org.slf4j:slf4j-api:2.0.7'
    //implementation 'ch.qos.logback:logback-classic:1.5.18'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
    //========================

    //===БД===================
    //implementation 'org.postgresql:postgresql'

    //runtimeOnly 'org.postgresql:postgresql'
    //=======================
}

application {
    mainClass = 'com.cipher.Launcher';
}

// Остальной код остается без изменений...
jlink {
    options = ['--strip-debug', '--no-header-files', '--no-man-pages']

    launcher {
        name = 'Mandelbrot For Cipher'
    }

    jpackage {
        def semver = project.version.toString()
        def m = (semver =~ /(\d+)\.(\d+)\.(\d+)/)
        appVersion = m ? "${m[0][1]}.${m[0][2]}.${m[0][3]}" : "1.0.0"

        vendor = 'BODROST'
        description = 'Mandelbrot For Cipher Application'
        skipInstaller = false

        installerOutputDir = layout.buildDirectory.dir('dist').get().asFile

        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            installerType = 'exe'
            def iconFile = file('src/main/resources/icon.ico')
            if (iconFile.exists()) {
                imageOptions += ['--icon', iconFile.absolutePath]
                installerOptions += ['--icon', iconFile.absolutePath]
            }
            installerOptions += [
                    '--win-per-user-install',
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut'
            ]
        }

        imageOptions += ['--verbose']
    }
}

tasks.register('fatJar', Jar) {
    archiveFileName = "mandelbrot_for_cipher-${version}-all.jar"
    destinationDirectory = layout.buildDirectory.dir('libs')

    manifest {
        attributes(
                'Main-Class': 'com.cipher.Launcher',
                'Implementation-Version': version
        )
    }

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it).matching {
                exclude 'META-INF/*.SF'
                exclude 'META-INF/*.DSA'
                exclude 'META-INF/*.RSA'
            }
        }
    }
    from sourceSets.main.output

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Для запуска в IDE через Gradle
tasks.named('run') {
    jvmArgs = [
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    ]
}